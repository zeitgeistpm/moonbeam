window.SIDEBAR_ITEMS = {"enum":[["AssetType",""],["CurrencyId",""],["Transactors",""]],"struct":[["Ancestry",""],["BaseXcmWeight",""],["CurrencyIdtoMultiLocation",""],["LocalAssetsPalletLocation",""],["MaxAssetsForTransfer",""],["MaxInstructions","Maximum number of instructions in a single XCM fragment. A sanity check against weight caculations getting too crazy."],["MoonbeamCall",""],["ParachainMinFee",""],["RelayChainOrigin",""],["RelayNetwork",""],["SelfLocation",""],["SelfLocationAbsolute",""],["SelfReserve",""],["UnitWeightCost",""],["XcmExecutorConfig",""],["XcmFeesAccount","Xcm fees will go to the treasury account"]],"type":[["AssetTransactors",""],["ForeignFungiblesTransactor",""],["LocalAssetTransactor","The transactor for our own chain currency."],["LocalFungiblesTransactor","Means for transacting local assets that are not the native currency This transactor uses the new reanchor logic"],["LocalOriginToLocation",""],["LocationToAccountId","Type for specifying how a `MultiLocation` can be converted into an `AccountId`. This is used when determining ownership of accounts for asset transacting and when attempting to use XCM `Transact` in order to determine the dispatch Origin."],["XcmBarrier",""],["XcmFeesToAccount","This is the struct that will handle the revenue from xcm fees We do not burn anything because we want to mimic exactly what the sovereign account has"],["XcmOriginToTransactDispatchOrigin","This is the type we use to convert an (incoming) XCM origin into a local `Origin` instance, ready for dispatching a transaction with Xcmâ€™s `Transact`. There is an `OriginKind` which can biases the kind of local `Origin` it will become."],["XcmRouter","The means for routing XCM messages which are not for local execution into the right message queues."],["XcmWeigher","Xcm Weigher shared between multiple Xcm-related configs."]]};